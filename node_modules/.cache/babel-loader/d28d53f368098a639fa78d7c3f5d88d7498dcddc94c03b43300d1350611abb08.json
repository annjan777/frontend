{"ast":null,"code":"require('dotenv').config();\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst mysql = require('mysql');\nconst cors = require('cors');\nconst morgan = require('morgan');\nconst app = express();\nconst port = 8001;\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\napp.use(morgan('combined'));\n\n// MySQL Database connection\nconst db = mysql.createConnection({\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  port: process.env.DB_PORT,\n  database: process.env.DB_NAME\n});\ndb.connect(err => {\n  if (err) {\n    console.error('DB connection failed: ' + err.stack);\n    return;\n  }\n  console.log('Connected to the database');\n});\n\n// Login Route\napp.post('/login', (req, res) => {\n  const {\n    contact_number,\n    password\n  } = req.body;\n  if (!contact_number || !password) {\n    return res.status(400).json({\n      message: 'Contact number and password are required'\n    });\n  }\n  const query = 'SELECT * FROM user_credentials WHERE contact_number = ? AND password = ?';\n  db.query(query, [contact_number, password], (err, results) => {\n    if (err) {\n      console.error('Error during login:', err);\n      return res.status(500).json({\n        message: 'An error occurred during login'\n      });\n    }\n    if (results.length === 0) {\n      return res.status(400).json({\n        message: 'Invalid username or password'\n      });\n    }\n\n    // User found, send response\n    const user = results[0];\n    res.json({\n      message: 'Login successful',\n      user: {\n        user_id: user.user_id,\n        contact_number: user.contact_number,\n        name: user.name,\n        address: user.address\n      }\n    });\n  });\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});","map":{"version":3,"names":["require","config","express","bodyParser","mysql","cors","morgan","app","port","use","json","db","createConnection","host","process","env","DB_HOST","user","DB_USER","password","DB_PASSWORD","DB_PORT","database","DB_NAME","connect","err","console","error","stack","log","post","req","res","contact_number","body","status","message","query","results","length","user_id","name","address","listen"],"sources":["/Users/annjan/section1-form/src/App.js"],"sourcesContent":["require('dotenv').config();\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst mysql = require('mysql');\nconst cors = require('cors');\nconst morgan = require('morgan');\n\nconst app = express();\nconst port = 8001;\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\napp.use(morgan('combined'));\n\n// MySQL Database connection\nconst db = mysql.createConnection({\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  port: process.env.DB_PORT,\n  database: process.env.DB_NAME,\n});\n\ndb.connect((err) => {\n  if (err) {\n    console.error('DB connection failed: ' + err.stack);\n    return;\n  }\n  console.log('Connected to the database');\n});\n\n// Login Route\napp.post('/login', (req, res) => {\n  const { contact_number, password } = req.body;\n\n  if (!contact_number || !password) {\n    return res.status(400).json({ message: 'Contact number and password are required' });\n  }\n\n  const query = 'SELECT * FROM user_credentials WHERE contact_number = ? AND password = ?';\n  db.query(query, [contact_number, password], (err, results) => {\n    if (err) {\n      console.error('Error during login:', err);\n      return res.status(500).json({ message: 'An error occurred during login' });\n    }\n\n    if (results.length === 0) {\n      return res.status(400).json({ message: 'Invalid username or password' });\n    }\n\n    // User found, send response\n    const user = results[0];\n    res.json({\n      message: 'Login successful',\n      user: { \n        user_id: user.user_id,\n        contact_number: user.contact_number,\n        name: user.name,\n        address: user.address\n      }\n    });\n  });\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}